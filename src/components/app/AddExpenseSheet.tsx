
'use client';

import { useState, type Dispatch, type SetStateAction } from 'react';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm, Controller } from 'react-hook-form';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetDescription,
  SheetFooter,
  SheetClose,
} from '@/components/ui/sheet';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Textarea } from '@/components/ui/textarea';
import { cn, getCurrencySymbol } from '@/lib/utils';
import { CalendarIcon, Wand2, Loader2 } from 'lucide-react';
import { format } from 'date-fns';
import { EXPENSE_CATEGORIES, type ExpenseCategory, type Expense, type CurrencyCode } from '@/types';
import { categorizeExpense as categorizeExpenseAI } from '@/ai/flows/categorize-expense';
import { useToast } from '@/hooks/use-toast';

// Define schema for form data, omitting fields generated by DB or passed from parent
const expenseFormSchema = z.object({
  amount: z.coerce.number().positive({ message: 'Amount must be positive.' }),
  category: z.enum(EXPENSE_CATEGORIES, { required_error: 'Category is required.' }),
  date: z.date({ required_error: 'Date is required.' }),
  description: z.string().min(1, { message: 'Description is required.' }).max(100, { message: 'Description too long.' }),
});

type ExpenseFormData = z.infer<typeof expenseFormSchema>;

interface AddExpenseSheetProps {
  isOpen: boolean;
  setIsOpen: Dispatch<SetStateAction<boolean>>;
  onSaveExpense: (expenseData: Omit<Expense, 'id' | 'user_id' | 'created_at' | 'updated_at'>) => Promise<void>; // Make it async
  currency: CurrencyCode;
}

export default function AddExpenseSheet({ isOpen, setIsOpen, onSaveExpense, currency }: AddExpenseSheetProps) {
  const { toast } = useToast();
  const [isCategorizing, setIsCategorizing] = useState(false);
  const [isSaving, setIsSaving] = useState(false);

  const form = useForm<ExpenseFormData>({
    resolver: zodResolver(expenseFormSchema),
    defaultValues: {
      date: new Date(),
      description: '',
      // amount and category will be undefined initially
    },
  });

  const onSubmit = async (data: ExpenseFormData) => {
    setIsSaving(true);
    try {
      // The onSaveExpense prop now handles the actual DB insertion and includes user_id
      await onSaveExpense(data); 
      form.reset({ date: new Date(), description: '', amount: undefined, category: undefined });
      setIsOpen(false);
      // Toast for success is handled in page.tsx after DB operation
    } catch (error) {
      // Error toast is handled in page.tsx
      console.error("Error in AddExpenseSheet onSubmit (should be caught by onSaveExpense):", error);
    } finally {
      setIsSaving(false);
    }
  };

  const handleAutoCategorize = async () => {
    const description = form.getValues('description');
    if (!description) {
      toast({ title: "Categorization Error", description: "Please enter a description first.", variant: "destructive" });
      return;
    }
    setIsCategorizing(true);
    try {
      const result = await categorizeExpenseAI({ description });
      if (result.category) {
        form.setValue('category', result.category as ExpenseCategory, { shouldValidate: true });
        toast({ title: "Auto-categorized!", description: `Expense categorized as ${result.category}.` });
      }
    } catch (error) {
      console.error("AI Categorization Error:", error);
      toast({ title: "Categorization Failed", description: "Could not automatically categorize the expense.", variant: "destructive" });
    } finally {
      setIsCategorizing(false);
    }
  };

  return (
    <Sheet open={isOpen} onOpenChange={(open) => {
      setIsOpen(open);
      if (!open) {
        form.reset({ date: new Date(), description: '', amount: undefined, category: undefined });
      }
    }}>
      <SheetContent className="sm:max-w-lg w-[90vw]">
        <SheetHeader>
          <SheetTitle>Add New Expense</SheetTitle>
          <SheetDescription>
            Fill in the details of your expense. Click save when you're done.
          </SheetDescription>
        </SheetHeader>
        <form onSubmit={form.handleSubmit(onSubmit)} className="grid gap-4 py-4">
          <div className="grid gap-2">
            <Label htmlFor="amount">Amount ({getCurrencySymbol(currency)})</Label>
            <Input id="amount" type="number" step="0.01" {...form.register('amount')} placeholder="e.g., 25.99" />
            {form.formState.errors.amount && <p className="text-sm text-destructive">{form.formState.errors.amount.message}</p>}
          </div>

          <div className="grid gap-2">
            <Label htmlFor="description">Description</Label>
            <Textarea id="description" {...form.register('description')} placeholder="e.g., Coffee with friends" />
            {form.formState.errors.description && <p className="text-sm text-destructive">{form.formState.errors.description.message}</p>}
          </div>

          <div className="grid gap-2">
            <div className="flex justify-between items-center">
              <Label htmlFor="category">Category</Label>
              <Button type="button" variant="ghost" size="sm" onClick={handleAutoCategorize} disabled={isCategorizing || isSaving}>
                {isCategorizing ? <Loader2 className="h-4 w-4 animate-spin mr-1" /> : <Wand2 className="h-4 w-4 mr-1" />}
                Suggest
              </Button>
            </div>
            <Controller
              control={form.control}
              name="category"
              render={({ field }) => (
                <Select onValueChange={field.onChange} value={field.value || ""} >
                  <SelectTrigger disabled={isSaving}>
                    <SelectValue placeholder="Select a category" />
                  </SelectTrigger>
                  <SelectContent>
                    {EXPENSE_CATEGORIES.map(cat => (
                      <SelectItem key={cat} value={cat}>{cat}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              )}
            />
            {form.formState.errors.category && <p className="text-sm text-destructive">{form.formState.errors.category.message}</p>}
          </div>
          
          <div className="grid gap-2">
            <Label htmlFor="date">Date</Label>
            <Controller
              control={form.control}
              name="date"
              render={({ field }) => (
                <Popover>
                  <PopoverTrigger asChild>
                    <Button
                      variant={"outline"}
                      className={cn(
                        "w-full justify-start text-left font-normal",
                        !field.value && "text-muted-foreground"
                      )}
                      disabled={isSaving}
                    >
                      <CalendarIcon className="mr-2 h-4 w-4" />
                      {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar
                      mode="single"
                      selected={field.value}
                      onSelect={field.onChange}
                      initialFocus
                      disabled={isSaving}
                    />
                  </PopoverContent>
                </Popover>
              )}
            />
            {form.formState.errors.date && <p className="text-sm text-destructive">{form.formState.errors.date.message}</p>}
          </div>

          <SheetFooter className="mt-6">
            <SheetClose asChild>
              <Button type="button" variant="outline" disabled={isSaving}>Cancel</Button>
            </SheetClose>
            <Button type="submit" disabled={isSaving || isCategorizing || form.formState.isSubmitting} className="bg-accent hover:bg-accent/90 text-accent-foreground">
              {(isSaving || isCategorizing || form.formState.isSubmitting) && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Save Expense
            </Button>
          </SheetFooter>
        </form>
      </SheetContent>
    </Sheet>
  );
}
